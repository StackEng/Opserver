appName: "opserver"
replicaCount: 1

tier: "Local"
product: "public" # used for datadog metrics and logs
aspnetcoreEnvironment: "Local"

requests:
  cpu: "1m"
  memory: "1M"

limits:
  memory: "1Gi"

exceptional:
  store:
    type: "Memory"
    connectionString: ""

datadog:
  agentHost: ""
  agentPort: "0"

secretStore:
  fake: true

images:
  containerRegistry: "local.software"
  opserver:
    name: "stackeng/opserver/opserver"
    tag: "latest"

image:
  pullPolicy: IfNotPresent
  pullSecretName: cloudsmith-cr-prod

adminRolebindingGroupId: "not set"

kestrel:
  endPoints:
    http:
      url: "http://0.0.0.0:8080/"
      containerPort: 8080

ingress:
  certIssuer: "letsencrypt-staging"
  className: "nginx-external"
  host: "opserver.local"
  secretName: "opserver-secret"
  enabled: true
  createTlsCert: false

db:
  exceptionalDbName: Local.Exceptions

opserverExternalSecret:
  name: opserver-secret
  refreshInterval: 5m
  storeRefName: fakeopserversecretstore
  targetName: opserver-secret
  remoteRefs:
    oktaClientId: opserver-okta-client-id
    oktaClientSecret: opserver-okta-client-secret

sqlExternalSecret:
  name: opserver-sqldb-external-secret
  refreshInterval: 5m
  storeRefName: fakeopserversecretstore
  targetName: sql-secret
  remoteRefs:
    sqlStatusSqlServerName: SqlStatusSqlServerName
    sqlStatusUsername: db-Opserver-Sql-Status-User
    sqlStatusPassword: db-Opserver-Sql-Status-Password
    exceptionalServerName: ExceptionsSqlServerName
    exceptionalUsername: db-Exceptions-User
    exceptionalPassword: db-Exceptions-Password

nodeScheduling: 
  scheduleOnSeparateNodes: false

configSecret:
  name: opserver-config
  refreshInterval: 5m
  storeRefName: fakeopserversecretstore
  targetName: opserver-config
  remoteRefs:
    ElasticSettings: opserver-elastic-config
    RedisSettings: opserver-redis-config
    SQLSettings: opserver-sql-config
