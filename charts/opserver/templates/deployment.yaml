apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      service: {{ .Release.Name }}
  template:
    metadata:
      labels:
        service: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ .Release.Name  }}
      containers:
      - name: opserver
        image: "{{ .Values.images.containerRegistry }}/{{ .Values.images.opserver.name }}:{{ .Values.images.opserver.tag }}"
        resources:
          requests:
            memory: {{ .Values.requests.memory }}
            cpu: {{ .Values.requests.cpu }}
          limits:
            memory: {{ .Values.limits.memory }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
        volumeMounts:
        - name: writable-tmp #need our own read-write enabled temp directory because aspnet spills large requests over to disk
          mountPath: /mnt/tmp
        - name: opserver-config
          mountPath: /app/Config
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.kestrel.endPoints.http.containerPort }}
        livenessProbe:
          httpGet:
            path: /health-checks/live
            port: {{ .Values.kestrel.endPoints.http.containerPort }}
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 2
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health-checks/ready
            port: {{ .Values.kestrel.endPoints.http.containerPort }}
          initialDelaySeconds: 10
          periodSeconds: 1
          successThreshold: 3
        env:
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP

        - name: DOTNET_EnableDiagnostics
          value: "0"
        - name: Logging__LogLevel__Microsoft
          value: "Warning"
        - name: ASPNETCORE_ENVIRONMENT
          value: {{ .Values.aspnetcoreEnvironment }}
        - name: PRODUCT
          value: {{ .Values.product }}

        - name: EXCEPTIONAL__STORE__APPLICATIONNAME
          value: "{{ .Release.Name }}"
        - name: EXCEPTIONAL__STORE__TYPE
          value: "{{ .Values.exceptional.store.type }}"

        - name: DATADOG__AGENTHOST
          value: "{{- if eq .Values.datadog.agentHost "127.0.0.1"}}$(NODE_IP){{- else}}{{ .Values.datadog.agentHost }}{{- end}}"
        - name: DATADOG__AGENTPORT
          value: "{{ .Values.datadog.agentPort }}"

        # this exact variable is required for our datadog configuration to work with tracing / APM
        - name: DD_AGENT_HOST
          value: "{{- if eq .Values.datadog.agentHost "127.0.0.1"}}$(NODE_IP){{- else}}{{ .Values.datadog.agentHost }}{{- end}}"

        - name: DD_RUNTIME_METRICS_ENABLED
          value: "true"

        - name: DD_SERVICE
          value: "opserver"

        - name: KESTREL__ENDPOINTS__HTTP__URL
          value: "http://0.0.0.0:{{ .Values.kestrel.endPoints.http.containerPort }}/"

        - name: TMPDIR #tell OS to use our read-write volume mount as its temp directory
          value: "/mnt/tmp"
        - name: Security__Provider
          value: {{ .Values.opserverSettings.security.provider }}

{{- if eq .Values.opserverSettings.security.provider "OIDC" }}
        - name: Security__UseHttpsForRedirects
          value: "true"
        - name: Security__Name
          value: "Okta"
        - name: Security__ViewEverythingGroups
          value: {{ .Values.opserverSettings.security.viewGroups | quote }}
        - name: Security__AdminEverythingGroups
          value: {{ .Values.opserverSettings.security.adminGroups | quote }}
        - name: Security__ClientId
          valueFrom:
            secretKeyRef:
              name: {{ .Values.opserverExternalSecret.targetName }}
              key: oktaClientId
        - name: Security__ClientSecret
          valueFrom:
            secretKeyRef:
              name: {{ .Values.opserverExternalSecret.targetName }}
              key: oktaClientSecret
        - name: Security__AuthorizationUrl
          value: "https://stackoverflow.okta.com/oauth2/v1/authorize"
        - name: Security__AccessTokenUrl
          value: "https://stackoverflow.okta.com/oauth2/v1/token"
        - name: Security__UserInfoUrl
          value: "https://stackoverflow.okta.com/oauth2/v1/userinfo"
        - name: Security__NameClaim
          value: "preferred_username"
        - name: Security__GroupsClaim
          value: "groups"
        - name: Security__Scopes__0
          value: "email"
        - name: Security__Scopes__1
          value: "groups"
        - name: Security__Scopes__2
          value: "profile"
{{- end }}

        - name: SQL_STATUS_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.sqlExternalSecret.targetName }}
              key: {{ .Values.sqlExternalSecret.remoteRefs.sqlStatusUsername }}
        - name: SQL_STATUS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.sqlExternalSecret.targetName }}
              key: {{ .Values.sqlExternalSecret.remoteRefs.sqlStatusPassword }}

        - name: Modules__Sql__defaultConnectionString
          value: "Server=$ServerName$;Database=master;User ID=$(SQL_STATUS_USERNAME);Password=$(SQL_STATUS_PASSWORD);TrustServerCertificate=True"

      {{- if hasKey .Values.opserverSettings "exceptions" }}
        - name: SQL_EXCEPTIONAL_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.sqlExternalSecret.targetName }}
              key: {{ .Values.sqlExternalSecret.remoteRefs.exceptionalUsername }}
        - name: SQL_EXCEPTIONAL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.sqlExternalSecret.targetName }}
              key: {{ .Values.sqlExternalSecret.remoteRefs.exceptionalPassword }}

        {{- range $i, $instance := .Values.opserverSettings.exceptions }}
        - name: Modules__Exceptions__stores__{{ $i }}__connectionString
          value: "Server={{ $instance.serverName}};Database={{ $instance.database}};User ID=$(SQL_EXCEPTIONAL_USERNAME);Password=$(SQL_EXCEPTIONAL_PASSWORD);TrustServerCertificate=True"
        {{- end }}

        - name: SQL_EXCEPTIONAL_SERVERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.sqlExternalSecret.targetName }}
              key: {{ .Values.sqlExternalSecret.remoteRefs.exceptionalServerName }}

        - name: EXCEPTIONAL__STORE__CONNECTIONSTRING
          value: Server=$(SQL_EXCEPTIONAL_SERVERNAME),1433;Database={{ .Values.db.exceptionalDbName }};Persist Security Info=False;User ID=$(SQL_EXCEPTIONAL_USERNAME);Password=$(SQL_EXCEPTIONAL_PASSWORD);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;MultiSubnetFailover=True
      {{- end }}

      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              service: {{ .Release.Name }}
          matchLabelKeys:
            - pod-template-hash

      {{- if and (hasKey .Values "nodeScheduling") (hasKey .Values.nodeScheduling "nodeSelectorLabel")}}
      nodeSelector:
        {{- range .Values.nodeScheduling.nodeSelectorLabel }}
        {{ .name }}: {{ .value | quote }}
        {{- end }}
      {{- end }}

      {{- if and (hasKey .Values "nodeScheduling") (hasKey .Values.nodeScheduling "tolerations")}}
      tolerations:
        {{- range .Values.nodeScheduling.tolerations }}
        - key: {{ .key }}
          operator: {{ .operator }}
          value: {{ .value | quote }}
          effect: {{ .effect }}
        {{- end }}
      {{- end }}

      restartPolicy: Always
      imagePullSecrets:
      - name: "{{ .Values.image.pullSecretName }}"
      volumes:
      - name: data-volume
        emptyDir: {}
      - name: log-volume
        emptyDir: {}
      volumes:
      - name: writable-tmp
        emptyDir: {}
      - name: opserver-config
        secret:
          secretName: {{ .Values.configSecret.targetName }}
