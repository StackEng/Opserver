name: Build images and create Octopus release
run-name: 'Build images and create release'

on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, synchronize, labeled, ready_for_review]
    paths-ignore:
      - README.md
  push:
    branches:
      - main
    paths-ignore:
      - README.md

jobs:
  generate_date_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.date-version.outputs.version }}
    steps: 
    - name: Checkout repo so we have local action file
      uses: actions/checkout@v4
    - name: Generate Date Version
      id: date-version
      uses: ./.github/actions/date_version

  build_docker:
    needs: [generate_date_version]
    uses: ./.github/workflows/build_app_docker_image.yml
    with:
      version: ${{ needs.generate_date_version.outputs.version }}
    secrets:
      registry_username: ${{ secrets.CLOUDSMITH_API_ACCOUNT }}
      registry_password: ${{ secrets.CLOUDSMITH_API_KEY }}
      nuget_user: ${{ secrets.CLOUDSMITH_API_ACCOUNT }}
      nuget_password: ${{ secrets.CLOUDSMITH_API_KEY }}

  build_cnab:
    uses: ./.github/workflows/build_cnab.yml
    needs: [generate_date_version]
    with:
      version: ${{ needs.generate_date_version.outputs.version }}
    secrets:
      registry_username: ${{ secrets.CLOUDSMITH_API_ACCOUNT }}
      registry_password: ${{ secrets.CLOUDSMITH_API_KEY }}
  create_release:
    needs: [build_docker, build_cnab, generate_date_version]
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy-to-ascn-dev'))
    steps:
      - name: Install Octopus CLI üêô
        uses: OctopusDeploy/install-octopus-cli-action@v3

      - name: Create Octopus release
        shell: bash
        env:
          OCTOPUS_URL: ${{ vars.OCTOPUS_CLOUD_URL }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_CLOUD_API_KEY }}
        run: |
          echo "Generating release notes"
          cat<<EOF > release-notes.md
          ${{ github.event.head_commit.message }}
          [$GITHUB_SHA]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA)
          [GitHub workflow run #$GITHUB_RUN_ID]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)
          EOF
          echo "Creating release for OpServer"
          octopus release create --space Default --project "OpServer" \
             --version="${{ needs.generate_date_version.outputs.version }}" \
             --release-notes-file release-notes.md
      - name: Deploy Octopus release
        shell: bash
        env:
          OCTOPUS_URL: ${{ vars.OCTOPUS_CLOUD_URL }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_CLOUD_API_KEY }}
        run: |
          environmentId="${{ github.ref_name == 'main' && 'test' || 'dev' }}"
          tenantId="${{ github.ref_name == 'main' && 'main' || 'ascn' }}"

          echo "Deploying release to $environmentId"
          octopus release deploy --space Default --project "OpServer" --version "${{ needs.generate_date_version.outputs.version }}" --deployTo=$environmentId --tenant=$tenantId